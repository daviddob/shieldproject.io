{"Title":"SHIELD: A Look Back","Author":"","Link":"https://starkandwayne.com/blog/shield-a-look-back/","Description":"\u003cdiv class=\"kg-card-markdown\"\u003e\u003cp\u003eAs we gear up to launch SHIELD v8 at the end of 2017, it occurs to me that SHIELD is nearing its second birthday.  To celebrate, I thought I'd take a look back through SHIELD two-year history.\u003c/p\u003e\n\u003cp\u003e(You may also be interested in previewing some of SHIELD v8's forthcoming features,\u003c/p\u003e\u003c/div\u003e","Content":"\u003cdiv class=\"kg-card-markdown\"\u003e\u003cp\u003eAs we gear up to launch SHIELD v8 at the end of 2017, it occurs to me that SHIELD is nearing its second birthday.  To celebrate, I thought I'd take a look back through SHIELD two-year history.\u003c/p\u003e\n\u003cp\u003e(You may also be interested in previewing some of SHIELD v8's forthcoming features, in \u003ca href=\"http://www.starkandwayne.com/blog/shield-a-look-forward/\"\u003eSHIELD: Looking Forward\u003c/a\u003e)\u003c/p\u003e\n\u003cp\u003eIn October 2015, a small team inside of Stark \u0026amp; Wayne put together a design document that would become the basis of the SHIELD implementation.  We were tasked with answering one of the biggest questions facing infrastructure teams: \u003cem\u003eHow do I safeguard my critical data?\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eAs a consulting firm, we'd been thinking about our customers' data almost constantly since the beginning.  The ability to spin up entire infrastructures with a single \u003ccode\u003ebosh deploy\u003c/code\u003e hasn't helped the data protection issue — if anything it's gotten worse.  Throw into the mix agile platforms like Pivotal's Cloud Foundry, replete with data-services brokers, and the body of critical data that needs protected only gets larger.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSHIELD\u003c/strong\u003e was our answer to that problem.\u003c/p\u003e\n\u003cp\u003eWhen we started, we had a small list of data systems to backup, and a requirement that we be able to store them in S3.  Due to some past experiences, the design team insisted that SHIELD be \u003cem\u003epluggable\u003c/em\u003e - adding support for new data systems would not require that the SHIELD software itself be rebuilt.\u003c/p\u003e\n\u003cp\u003eBy early November, the core API and the inner workings of the scheduler were complete.  By late November, SHIELD sported a new plugin framework that took most of the drudgery and repetition out of plugin authoring.\u003c/p\u003e\n\u003cp\u003eThe SSH agent architecture was lifted from the wildly-successful Concourse CI/CD system — the SHIELD core would open up an SSH tunnel to target and storage agents whenever it ran a backup or restore job.  This simple yet powerful paradigm still exists in SHIELD today, because it provides confidentiality of inflight data, message integrity (no corrupt backups!) and simple authentication.\u003c/p\u003e\n\u003cp\u003eBy Thanksgiving, we deployed SHIELD to our first production environment, and began backing up several Cloud Foundry instances to Amazon S3.\u003c/p\u003e\n\u003cp\u003eBy Christmas, we had a first-class SHIELD command-line utility for managing SHIELD without using raw HTTP REST API calls and \u003ccode\u003ecurl\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eQ1 of 2016 saw several weeks of internal refactoring and code cleanups.  When you move as fast as the team did during the early days, you're bound to rack up some technical debt and it's always a good idea to go back and pare that down periodically.  By this time, we had a large and growing list of plugins: PostgreSQL, MySQL, the filesystem plugin, Amazon S3, and several Cloud Foundry service broker plugins for everything from RabbitMQ to Redis.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFun Fact:\u003c/strong\u003e there are 14 commits against SHIELD consisting of nothing but \u003ccode\u003ego fmt\u003c/code\u003e cleanup runs.\u003c/p\u003e\n\u003cp\u003eBy mid-2016, the SHIELD CLI had been re-written from the ground-up to the one you know and love today, and SHIELD's web UI was more or less complete.\u003c/p\u003e\n\u003cp\u003eI wanted to take a moment to thank all of the people who helped SHIELD along its way.  We wouldn't be where we are today were it not for these heroic individuals who said, \u0026quot;Build a backup / restore system?  Why not?\u0026quot;\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/quintessence\"\u003eQuintessence Anx\u003c/a\u003e\u003c/strong\u003e for all of her help on the SHIELD Core (database, scheduler, API)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/thomasmmitchell\"\u003eThomas Mitchell\u003c/a\u003e\u003c/strong\u003e for his efforts to keep the CLI elegant \u003cem\u003eand\u003c/em\u003e functional.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/geofffranks\"\u003eGeoff Franks\u003c/a\u003e\u003c/strong\u003e for the bug finding, the bug fixing, and the entirety of the SHIELD Plugin Framework\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/dennisjbell\"\u003eDennis Bell\u003c/a\u003e\u003c/strong\u003e for pulling us out of the dark ages and porting the original CLI from shell to Go.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOver the past year and a half, we've been busy running SHIELD and integrating with various customer data systems, all the while planning the next big round of features.  As we run up to the release of SHIELD v8, we've got a lot of new and exciting features to show off, including Github and Cloud Foundry UAA-based authentication, at-rest encryption, and a fluid and easy-to-use web user interface.\u003c/p\u003e\n\u003cp\u003eStay tuned!\u003c/p\u003e\n\u003c/div\u003e","PubDate":"Thu, 05 Oct 2017 19:18:56 GMT","Comments":"","Category":["SHIELD"]}