{"Title":"SHIELD v8 using UAA","Author":"","Link":"https://starkandwayne.com/blog/shield-v8-using-uaa/","Description":"SHIELD v8 adds support for GitHub and UAA authentication providers, allowing you  to leverage existing authentication providers to grant access to SHIELD.\n","Content":"\u003cdiv class=\"kg-card-markdown\"\u003e\u003ch1 id=\"overview\"\u003eOverview\u003c/h1\u003e\n\u003cp\u003eThe upcoming release of SHIELD v8 adds support for GitHub and UAA authentication providers. Previous versions of SHIELD only supported basic auth. Many organizations already heavily rely on GitHub and UAA to organize users and permissions within an organization. You will be able to leverage these existing authentication providers to grant access to SHIELD.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/starkandwayne/shield/blob/v8/docs/tenancy.md\"\u003eMulti-tenancy\u003c/a\u003e is also being added. A tenant is a single group that defines the context for interaction with resources in a SHIELD configuration. All retention policies, jobs, backup targets, storage endpoints, and archives belong to a single tenant. Each tenant creates and manages its own target and storage configurations, and tenants are prevented from accessing or viewing another tenant's configuration.\u003c/p\u003e\n\u003cp\u003eThe rest of this blog explores leveraging groups defined in UAA and mapping these groups to tenants in SHIELD. There are many different ways to mapping \u003ca href=\"https://github.com/starkandwayne/shield/blob/v8/docs/auth/uaa.md#mappings\"\u003etenant roles\u003c/a\u003e to UAA groups, you are encouraged to understand these roles and map them to your organization as you see fit.\u003c/p\u003e\n\u003ch1 id=\"usecase\"\u003eUse Case\u003c/h1\u003e\n\u003cp\u003eAssume we work at a company where UAA is used to control access to BOSH with the following groups of people:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAdmins are defined in the BOSH deployment manifest's UAA properties to control the cloud-config and platform level maintenance such as deploying BOSH, Cloud Foundry \u0026amp; SHIELD.\u003c/li\u003e\n\u003cli\u003eThere are also \u003ca href=\"https://bosh.io/docs/director-users-uaa-perms.html#team-admin\"\u003eBOSH Teams\u003c/a\u003e defined where members of each of these teams can deploy without having access to the platform deployments or deployments from other BOSH teams.\u003c/li\u003e\n\u003cli\u003eThere are three BOSH Teams defined with this sandboxed access: Postgres Team, RabbitMQ Team, and Vault Team.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOur goal is for each of these teams to control their own BOSH deployments and also control their own backups and restores with SHIELD without impacting each other. The overall use case looks like:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/cweibel/ghost_blog_pics/master/shield.v8.uaa.png\" alt=\"use cases\"\u003e\u003c/p\u003e\n\u003ch1 id=\"implementation\"\u003eImplementation\u003c/h1\u003e\n\u003cp\u003eConfiguring SHIELD to use UAA is done in two steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eConfigure UAA groups and membership in BOSH\u003c/li\u003e\n\u003cli\u003eConfigure the UAA group mappings to SHIELD tenants and roles\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"step1configuringbosh\"\u003eStep 1 - Configuring BOSH\u003c/h2\u003e\n\u003cp\u003eWe've identified a number of groups in our organization which have different access requirements to both BOSH and SHIELD. Below we break down how to turn pieces of the use case into configuration points in the BOSH deployment manifest.\u003c/p\u003e\n\u003ch3 id=\"defineboshteamsuaagroups\"\u003eDefine BOSH Teams / UAA Groups\u003c/h3\u003e\n\u003cp\u003eIn the manifest for BOSH we can define the three teams, one each for the Postgres Team, RabbitMQ Team, and Vault Team:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproperties:\n  uaa:\n    scim:\n      groups:\n        bosh.teams.postgres.admin: Postgres Admin Group\n        bosh.teams.rabbitmq.admin: RabbitMQ Admin Group\n        bosh.teams.vault.admin:    Vault Admin Group\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo that each team can also upload their own stemcells and releases, we also add the groups \u003ccode\u003ebosh.read\u003c/code\u003e, \u003ccode\u003ebosh.releases.upload\u003c/code\u003e, and \u003ccode\u003ebosh.stemcell.upload\u003c/code\u003e as described in the \u003ca href=\"https://bosh.io/docs/director-users-uaa-perms.html#team-admin\"\u003eBOSH Teams documentation\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproperties:\n  uaa:\n    scim:\n      groups:\n        bosh.read: BOSH Read Only Access\n        bosh.releases.upload: BOSH Releases Upload Group\n        bosh.stemcells.upload: BOSH Stemcell Upload Group\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe'll also add three SHIELD specific UAA groups to make mapping a bit easier to each of the SYSTEM tenant roles understood by SHIELD (admin, manager, engineer):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproperties:\n  uaa:\n    scim:\n      groups:\n        shield.admin: SHIELD System Admin Group\n        shield.manager: SHIELD System Manager Group\n        shield.engineer: SHIELD System Engineering Group\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"defineuaausers\"\u003eDefine UAA Users\u003c/h3\u003e\n\u003cp\u003eNow that all the UAA groups have been defined for our use case, the UAA users can be added. UAA users are defined with the usernames and passwords used for authentication. UAA users are associated with one or more UAA groups.\u003c/p\u003e\n\u003cp\u003eWe'll start with a typical BOSH Admin. These individuals have full access to BOSH and are responsible for deploying and maintaining BOSH, SHIELD, and Cloud Foundry. Normally, this account would be configured with \u003ccode\u003ebosh.admin, uaa.admin, scim.read and scim.write\u003c/code\u003e access but we're also adding \u003ccode\u003eshield.admin\u003c/code\u003e to make the mapping clearer in Step 2. Replace \u003ccode\u003eadmin\u003c/code\u003e with a real person's name or identifier for your own deployment:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproperties:\n  uaa:\n    scim:\n      users:\n      - name: admin\n        groups: [shield.admin, bosh.admin, uaa.admin, scim.read, scim.write]\n        password: admin2\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo add a user to the Postgres Team, they will need to be placed in their own BOSH team and be able to upload BOSH releases and stemcells. The same needs to be done for the RabbitMQ and Vault team members and is omitted for brevity. Again, replace \u003ccode\u003epostgres.admin\u003c/code\u003e with a real person's name or identifier.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproperties:\n  uaa:\n    scim:\n      users:\n      - name: postgres.admin\n        groups: [bosh.teams.postgres.admin, bosh.read, bosh.releases.upload, bosh.stemcells.upload]\n        password: psq5432\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"defineauaaclient\"\u003eDefine a UAA Client\u003c/h3\u003e\n\u003cp\u003eThe SHIELD daemon also needs to communicate with UAA to retrieve information about group membership. This is done by configuring a UAA Client, an alternate set of instructions using the \u003ccode\u003euaac\u003c/code\u003e client are described \u003ca href=\"https://github.com/starkandwayne/shield/blob/v8/docs/auth/uaa.md#registering-a-client-with-uaa\"\u003ehere\u003c/a\u003e. The only change you need to make for your own deployment is to the \u003ccode\u003eredirect-uri\u003c/code\u003e which will be the URL to the SHIELD daemon:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproperties:\n  uaa:\n    clients:\n      shield-dev:\n        name: S.H.I.E.L.D.\n        override: true\n        authorized-grant-types: authorization_code\n        scope: openid\n        authorities: uaa.none\n        access-token-validity: 180\n        refresh-token-validity: 180\n        secret: \u0026quot;s.h.i.e.l.d.\u0026quot;\n        redirect-uri: http://localhost:8181/auth/uaa1/redir\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAbove, the \u003ccode\u003eredirect-uri\u003c/code\u003e also contains the name of the UAA instance, called the \u003ccode\u003eidentifier\u003c/code\u003e, which in this example has the value \u003ccode\u003euaa1\u003c/code\u003e which will be needed later in Step 2. The \u0026quot;name\u0026quot; of the client \u003ccode\u003eshield-dev\u003c/code\u003e and the \u0026quot;secret\u0026quot; \u003ccode\u003es.h.i.e.l.d.\u003c/code\u003e will also be needed in Step 2.\u003c/p\u003e\n\u003ch3 id=\"completeboshmanifestsnippet\"\u003eComplete BOSH Manifest Snippet\u003c/h3\u003e\n\u003cp\u003ePutting this all together, here is the full snippet we'll be adding to the BOSH manifest:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproperties:\n  uaa:\n    scim:\n      groups:\n        bosh.read: BOSH Read Only Access\n        bosh.releases.upload: BOSH Releases Upload Group\n        bosh.stemcells.upload: BOSH Stemcell Upload Group\n        bosh.teams.postgres.admin: Postgres Admin Group\n        bosh.teams.rabbitmq.admin: RabbitMQ Admin Group\n        bosh.teams.vault.admin: Vault Admin Group\n        shield.admin: SHIELD System Admin Group\n        shield.manager: SHIELD System Manager Group\n        shield.engineer: SHIELD System Engineering Group\n      users:\n      - name: admin\n        groups: [shield.admin, bosh.admin, uaa.admin, scim.read, scim.write]\n        password: admin2\n      - name: a.security.engineer\n        groups: [shield.engineer, bosh.read, scim.read]\n        password: admin2\n      - name: postgres.admin\n        groups: [bosh.teams.postgres.admin, bosh.read, bosh.releases.upload, bosh.stemcells.upload]\n        password: psq5432\n      - name: rabbitmq.admin\n        groups: [bosh.teams.rabbitmq.admin, bosh.read, bosh.releases.upload, bosh.stemcells.upload]\n        password: rabbit5672\n      - name: vault.admin\n        groups: [bosh.teams.vault.admin, bosh.read, bosh.releases.upload, bosh.stemcells.upload]\n        password: hashi8200\n    clients:\n      shield-dev:\n        name: S.H.I.E.L.D.\n        override: true\n        authorized-grant-types: authorization_code\n        scope: openid\n        authorities: uaa.none\n        access-token-validity: 180\n        refresh-token-validity: 180\n        secret: \u0026quot;s.h.i.e.l.d.\u0026quot;\n        redirect-uri: http://localhost:8181/auth/uaa1/redir\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow redeploy your BOSH Director so the changes are pushed to the UAA instance on the director.\u003c/p\u003e\n\u003cp\u003eNote that all of this could have been done using \u003ccode\u003euaac\u003c/code\u003e commands however if you have multiple environments, having the groups, users, and clients defined in the BOSH manifest makes it easier to repeat this configuration. The passwords are also easily cracked in this example, use more secure passwords or let \u003ca href=\"https://docs.cloudfoundry.org/credhub/setup-credhub-bosh.html\"\u003ecredhub automatically create them for you.\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"step2configureuaagroupsmappingtoshieldtenants\"\u003eStep 2 - Configure UAA Groups Mapping to SHIELD Tenants\u003c/h2\u003e\n\u003cp\u003eThis portion of the configuration is responsible for controlling which authentication providers will be used by SHIELD. This is also where the mapping between UAA Groups, SHIELD Tenants, and Roles are defined. This is done by modifying the deployment manifest for SHIELD.\u003c/p\u003e\n\u003ch3 id=\"defineuaaauthenticationprovider\"\u003eDefine UAA Authentication Provider\u003c/h3\u003e\n\u003cp\u003eStart with the configuring SHIELD to allow \u003ccode\u003euaa\u003c/code\u003e to be one of the authentication providers. At the end of Step 1 we configured a UAA Client for the SHIELD daemon. From this we can extract the \u003ccode\u003eclient_id\u003c/code\u003e, \u003ccode\u003eclient_secret\u003c/code\u003e and \u003ccode\u003eidentifier\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eproperties:\n  uaa:\n    clients:\n      shield-dev:                                            #\u0026lt;== Match to client_id:\n        secret: \u0026quot;s.h.i.e.l.d.\u0026quot;                               #\u0026lt;== Match to client_secret:\n        redirect-uri: http://localhost:8181/auth/uaa1/redir  #\u0026lt;== `uaa1` matches to the identifier:\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can start to configure the manifest for SHIELD, the source of information is commented on each line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eauth:\n  - name:       Prod BOSH UAA                     #\u0026lt;== This text shows up in the SHIELD login page \n    identifier: uaa1                              #\u0026lt;== From the BOSH Manifest\n    backend:    uaa                               #\u0026lt;== Must be `uaa`, indicates provider type\n    properties:\n      client_id:       shield-dev                 #\u0026lt;== From the BOSH Manifest\n      client_secret:   s.h.i.e.l.d.               #\u0026lt;== From the BOSH Manifest\n      uaa_endpoint:    https://192.168.50.6:8443  #\u0026lt;== Points to the UAA instance on BOSH\n      skip_verify_tls: true\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"definemappingsboshadminsecurityadmin\"\u003eDefine Mappings - BOSH Admin \u0026amp; Security Admin\u003c/h3\u003e\n\u003cp\u003eFirst we will start with the mappings for the BOSH Admin and the Security Admin. There is a special tenant, called the SYSTEM tenant, that exists solely to allow SHIELD site operators to assign system-level rights and roles to UAA group members, based on the same rules as tenant-level role assignment.\u003c/p\u003e\n\u003cp\u003eThe SYSTEM tenant has its own set of assignable roles:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eadmin - Full control over all of SHIELD.\u003c/li\u003e\n\u003cli\u003emanager - Control over tenants and manual role assigments.\u003c/li\u003e\n\u003cli\u003eengineer - Control over shared resources like global storage definitions and retention policy templates.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese rights rules are processed until one matches; subsequent rules are skipped.\u003c/p\u003e\n\u003cp\u003eHere is our use case mapping:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/cweibel/ghost_blog_pics/master/shield.v8.uaa.bosh.admin.security.admin.png\" alt=\"use cases\"\u003e\u003c/p\u003e\n\u003cp\u003eWe'll use the \u003ccode\u003eSystem\u003c/code\u003e tenant and map the UAA group \u003ccode\u003eBOSH Admins\u003c/code\u003e are mapped to \u003ccode\u003eSHIELD System Admin\u003c/code\u003e role in the use case. We are using both \u003ccode\u003ebosh.admin\u003c/code\u003e and \u003ccode\u003eshield.admin\u003c/code\u003e in case there were other users defined as \u003ccode\u003ebosh.admin\u003c/code\u003e manually through \u003ccode\u003euaac\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWe also will map the UAA group \u003ccode\u003eshield.engineer\u003c/code\u003e, which the Security Admin is a part of to the \u003ccode\u003eSHIELD System Engineer\u003c/code\u003e, that will have a SHIELD role of \u003ccode\u003eengineer\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eauth:\n  - name:       Prod BOSH UAA\n    properties:\n      mapping:\n        - tenant: SYSTEM\n          rights:\n            - { scim: bosh.admin,      role: admin }\n            - { scim: shield.admin,    role: admin }\n            - { scim: shield.engineer, role: engineer }\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"definemappingsboshadminfortheboshandcftenant\"\u003eDefine Mappings - BOSH Admin for the BOSH and CF Tenant\u003c/h3\u003e\n\u003cp\u003eIt is also desired to have BOSH Admins control the backups for the BOSH Director database, the SHIELD database, and Cloud Foundry's databases.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/cweibel/ghost_blog_pics/master/shield.v8.uaa.bosh.ccdb.png\" alt=\"use cases\"\u003e\u003c/p\u003e\n\u003cp\u003eFor non-SYSTEM tenants valid values for the role field are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eadmin - Full control over the tenant.\u003c/li\u003e\n\u003cli\u003eengineer - Control over the configuration of stores, targets, retention policies, and jobs.\u003c/li\u003e\n\u003cli\u003eoperator - Control over running jobs, pausing and unpausing scheduled jobs, and performing restore operations.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn our case we want anyone who is a BOSH Admin to be a BOSH \u0026amp; CF Tenant Admin. To do this, define a SHIELD tenant and associate the BOSH Admins to be a SHIELD admin for this tenant:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eauth:\n  - name:       Prod BOSH UAA\n    properties:\n      mapping:\n        - tenant: BOSH and CF\n          rights:\n            - { scim: bosh.admin, role: admin }\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"definemappingspostgresadmin\"\u003eDefine Mappings - Postgres Admin\u003c/h3\u003e\n\u003cp\u003eNow we can map the tenant for the Postgres Admin. The Postgres Admin is identified by the UAA group \u003ccode\u003ebosh.teams.postgres.admin\u003c/code\u003e and we want this person to have complete control of their backups.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/cweibel/ghost_blog_pics/master/shield.v8.uaa.postgres.admin.png\" alt=\"use cases\"\u003e\u003c/p\u003e\n\u003cp\u003eTo do this define, a SHIELD tenant named \u003ccode\u003ePostgres Team\u003c/code\u003e, and associate the UAA Group \u003ccode\u003ebosh.teams.postgres.admin\u003c/code\u003e for the Postgres Admin with the SHIELD tenant role \u003ccode\u003eadmin\u003c/code\u003e for the Postgres Team tenant:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eauth:\n  - name:       Prod BOSH UAA\n    properties:\n      mapping:\n        - tenant: Postgres Team\n          rights:\n            - { scim: bosh.teams.postgres.admin, role: admin }\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"definemappingsrabbitmqadmin\"\u003eDefine Mappings - RabbitMQ Admin\u003c/h3\u003e\n\u003cp\u003eNow we can map the tenant for the RabbitMQ Admin. The RabbitMQ Admin is identified by the UAA group \u003ccode\u003ebosh.teams.rabbitmq.admin\u003c/code\u003e and we want this person to have complete control of their backups.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/cweibel/ghost_blog_pics/master/shield.v8.uaa.rabbitmq.admin.png\" alt=\"use cases\"\u003e\u003c/p\u003e\n\u003cp\u003eTo do this, define a SHIELD tenant named \u003ccode\u003eRabbitMQ Team\u003c/code\u003e and associate the UAA Group \u003ccode\u003ebosh.teams.rabbitmq.admin\u003c/code\u003e for the RabbitMQ Admin with the SHIELD tenant role \u003ccode\u003eadmin\u003c/code\u003e for the RabbitMQ Team tenant:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eauth:\n  - name:       Prod BOSH UAA\n    properties:\n      mapping:\n        - tenant: RabbitMQ Team\n          rights:\n            - { scim: bosh.teams.rabbitmq.admin, role: admin }\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"definemappingsvaultadmin\"\u003eDefine Mappings - Vault Admin\u003c/h3\u003e\n\u003cp\u003eNow we can map the tenant for the Vault Admin. The Vault Admin is identified by the UAA group \u003ccode\u003ebosh.teams.vault.admin\u003c/code\u003e, and we want this person to have complete control of their backups.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/cweibel/ghost_blog_pics/master/shield.v8.uaa.vault.admin.png\" alt=\"use cases\"\u003e\u003c/p\u003e\n\u003cp\u003eTo do this define a SHIELD tenant named \u003ccode\u003eVault Team\u003c/code\u003e and associate the UAA Group \u003ccode\u003ebosh.teams.vault.admin\u003c/code\u003e for the Vault Admin with the SHIELD tenant role \u003ccode\u003eadmin\u003c/code\u003e for the Vault Team tenant:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eauth:\n  - name:       Prod BOSH UAA\n    properties:\n      mapping:\n        - tenant: Vault Team\n          rights:\n            - scim: bosh.teams.vault.admin\n              role: admin\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"thecompletemapping\"\u003eThe Complete Mapping\u003c/h3\u003e\n\u003cp\u003eThe full snippet for the defining the UAA authentication provider and mappings is below. Members of the mapped UAA groups will be able to connect to the SHIELD tenants they are mapped to.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eauth:\n  - name:       Prod BOSH UAA\n    identifier: uaa1\n    backend:    uaa\n    properties:\n      client_id:       shield-dev\n      client_secret:   s.h.i.e.l.d.\n      uaa_endpoint:    https://192.168.50.6:8443\n      skip_verify_tls: true\n      mapping:\n        - tenant: SYSTEM                       \n          rights:\n            - { scim: bosh.admin,      role: admin }\n            - { scim: shield.admin,    role: admin }\n            - { scim: shield.engineer, role: engineer }\n\n        - tenant: BOSH and CF\n          rights:\n            - { scim: bosh.admin, role: admin }\n\n        - tenant: Postgres Team               \n          rights:\n            - { scim: bosh.teams.postgres.admin, role: admin }                     \n\n        - tenant: RabbitMQ Team               \n          rights:\n            - { scim: bosh.teams.rabbitmq.admin, role: admin }                \n                                \n        - tenant: Vault Team     \n          rights:\n            - { scim: bosh.teams.vault.admin, role: admin }\n\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"selectinguaaauthenticationproviderforlogin\"\u003eSelecting UAA Authentication Provider for Login\u003c/h3\u003e\n\u003cp\u003eOnce SHIELD is deployed with the configuration for the UAA this authentication provider will be available via the SHIELD UI. The authentication provider defined in \u003ccode\u003eauth.name\u003c/code\u003e of the SHIELD manifest is what will appear on the login screen, clicking on this will start the UAA interaction:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/cweibel/ghost_blog_pics/master/shield_v8_login.png\" alt=\"use cases\"\u003e\u003c/p\u003e\n\u003ch3 id=\"logintouaa\"\u003eLogin to UAA\u003c/h3\u003e\n\u003cp\u003eNow the interaction with UAA is initiated. Enter the username and password of one of the UAA user accounts that was defined in the manifest for BOSH. Note the URL in the browser navigates to the UAA instance on the BOSH Director as defined in \u003ccode\u003eauth.properties.uaa_endpoint\u003c/code\u003e of the SHIELD manifest. In the screenshot below, we'll login as BOSH Admin:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/cweibel/ghost_blog_pics/master/shield_v8_uaa_login.png\" alt=\"use cases\"\u003e\u003c/p\u003e\n\u003ch3 id=\"systemtenantcfandboshtenant\"\u003eSystem Tenant \u0026amp; CF and BOSH Tenant\u003c/h3\u003e\n\u003cp\u003eWe are now logged in as the BOSH Admin. The BOSH Admin belongs to two SHIELD tenants: \u003ccode\u003eSYSTEM\u003c/code\u003e and \u003ccode\u003eBOSH and CF\u003c/code\u003e. Membership to SYSTEM gives the user access to the \u003ccode\u003eAdmin\u003c/code\u003e tab in the UI. Membership to the \u003ccode\u003eBOSH and CF\u003c/code\u003e tenant allows the other \u003ccode\u003eSystems\u003c/code\u003e, \u003ccode\u003eStorage\u003c/code\u003e, and \u003ccode\u003eRetention\u003c/code\u003e tabs to manage backups for BOSH, CF, and SHIELD database backups:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/cweibel/ghost_blog_pics/master/shield_v8_bosh_admin_homepage.png\" alt=\"use cases\"\u003e\u003c/p\u003e\n\u003ch3 id=\"postgrestenant\"\u003ePostgres Tenant\u003c/h3\u003e\n\u003cp\u003eIf instead we had logged in as Postgres Admin we would have access to the \u003ccode\u003ePostgres Team\u003c/code\u003e tenant but not access to other tenants or the \u003ccode\u003eAdmin\u003c/code\u003e tab:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/cweibel/ghost_blog_pics/master/shield_v8_postgres_admin_homepage.png\" alt=\"use cases\"\u003e\u003c/p\u003e\n\u003ch2 id=\"nextsteps\"\u003eNext Steps\u003c/h2\u003e\n\u003cp\u003eAnother supported SHIELD Authentication Provider is Github; it also has the concept of mapping. This involves mapping Github orgs to SHIELD tenants and roles. More about this is \u003ca href=\"https://github.com/starkandwayne/shield/blob/v8/docs/auth/github.md\"\u003ehere.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou can also use a stand-alone deployment of UAA, or even the UAA instance that is included in Cloud Foundry. The example in this blog is based on a real world use case where there are BOSH Teams already leveraged to sandbox BOSH access. There are also tenant roles which were not used because each of the teams have a few people all with the same responsibilities to their teams. The additional tenant roles can be used for teams where team members have different roles and responsibilities.\u003c/p\u003e\n\u003cp\u003eEveryone deserves nice things, if there is another use case you would like to discuss, please contact us!  There is a Slack channel \u003ccode\u003e#help\u003c/code\u003e in \u003ca href=\"https://shieldproject.slack.com\"\u003eshieldproject.slack.com\u003c/a\u003e or simply reply to this blog post.\u003c/p\u003e\n\u003c/div\u003e","PubDate":"Thu, 14 Dec 2017 19:52:36 GMT","Comments":"","Category":["author-cweibel","SHIELD"]}