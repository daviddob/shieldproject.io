---
# vim:ft=markdown:tw=76
title:  SHIELD Operator's Manual
url:    /docs/manual/index.html
format: markdown
--- |-

Hello, and welcome to the **SHIELD Operator's Manual**, an in-depth look at
all things SHIELD.  This guide aims to be an exhaustive guide to the
installation and operation of the SHIELD Data Protection solution.

If you are looking for a more easy-going start-up guide, you may want to
check out the [Getting Started](/docs/getting-started) guide.

If you are interested in contributing to SHIELD itself, or wish to write a
plugin to extend the capabilities of your SHIELD installation, head on over
to the [SHIELD Developer Documentation](/devs).


# What is SHIELD?

SHIELD is a _data protection_ solution.  It is designed to run scheduled
tasks to backup your important data systems to off-site cloud storage
solutions, and facilitate the restoration of backup archives in the event of
outages or data loss.

SHIELD supports lots of different data systems, through its flexible and
modular plugin architecture.  We currently support:

  - **PostgreSQL** databases, via the [`postgres` plugin][postgres-plugin].
  - **MySQL** / **MariaDB**, via the [`mysql` plugin][mysql-plugin], or the
    [`xtrabackup` plugin][xtrabackup-plugin].
  - **Redis** key-value store, via the [`redis` plugin][redis-plugin].
  - ... and [many more][target-plugins].


[postgres-plugin]:   /docs/plugins/postgres
[mysql-plugin]:      /docs/plugins/mysql
[xtrabackup-plugin]: /docs/plugins/xtrabackup
[redis-plugin]:      /docs/plugins/redis
[target-plugins]:    /docs/plugins#target-plugins

Cloud Storage systems are likewise pluggable.  Out of the box, SHIELD
supports:

  - **Amazon S3** (and S3 work-alikes) via the [`s3` plugin][s3-plugin].
  - **Microsoft Azure Blobstore** via the [`azure` plugin][azure-plugin].
  - **GCP Blobstore** via the [`google` plugin][google-plugin].
  - On-premise **WebDAV** endpoints, via the [`webdav` plugin][webdav-plugin].
  - ... and [several others][store-plugins].

[s3-plugin]:     /docs/plugins/s3
[azure-plugin]:  /docs/plugins/azure
[google-plugin]: /docs/plugins/google
[webdav-plugin]: /docs/plugins/webdav
[store-plugins]: /docs/plugins/#store-plugins

SHIELD is a distributed system.  The SHIELD _core_ leverages a network of
_agents_ to do the heavy lifting of data backup and restore.  When you
deploy SHIELD into your infrastructure, yet get to choose how many agents
you want to provision, and where in the network they sit.

// FIXME: link to more in-depth docs on the architecture of SHIELD

_Multi-tenancy_ is baked right into SHIELD via a robust role-based access
control (RBAC) system in place to help isolate different subsets of users
from one another.  People in one tenant are unable to see configurations
made by people in another tenant.  This allows a single SHIELD to support
multiple, independent teams.

// FIXME: link to more in-depth docs on MT and RBAC

SHIELD also supports a sophisticated authentication system.  You can hook
up to your external Cloud Foundry UAA server, a BOSH UAA instance, or even
Github (both public and on-premise).  As users log in via their external
credentials, SHIELD will automatically create the necessary tenants and
assign roles based on the SHIELD configuration.

// FIXME: link to more in-depth docs on how Authn works

We believe strongly in encryption.  Whenever SHIELD communicates across the
network, it does so over encrypted channels (SSH, TLS/HTTPS), with endpoint
identity verification (host keys, mutual TLS, etc.).  All backup archives
are encrypted with unique key material, to ensure that data at-rest is also
resistent to snooping and tampering.

// FIXME: link to more in-depth docs on how SHIELD encryption works

# Installation

Before you can begin to use SHIELD to protect your important data, you're
going to need to install it.  You have three options: via [BOSH][bosh]
(ideal for Cloud Foundry users), via [Docker][docker], and manually.

[bosh]:   https://bosh.io
[docker]: https://docker.com

## Planning Your Installation

Before you start installing the software, it's worthwhile to take a step
back and plan out your installation

### Network Topology

SHIELD operates best on flat network topologies, without <abbr>NAT</abbr>
devices or HTTP(S) proxy services.

![A Flat Network Topology](/docs/manual/flat-topology.png)

SHIELD requires _mutual network visibility_ between the core and all
cooperating agents.  Each agent issues a small HTTP request to the core,
to inform the core that it is alive, and ready to be inventoried.  This is
called the _registration ping_.  For each registration ping received, the
core records the name and port given and the remote address of the
connecting TCP socket.  At some later time, the SHIELD core will initiate an
SSH connection to the recorded agent IP address, and gather agent
information.

Because of this, NAT devices tend to confound SHIELD.  The registration ping
originats (at the TCP level) from the NAT gateway, not the host running the
SHIELD agent software.  When the core attempts to connect back to the agent,
it initiates a connection to the _NAT device_ on the agent port, which
generally fails.

Flat networks with HTTP(S) proxies are not impossible, but they can be
unruly.  When configuring proxy clients (via `http_proxy` / `https_proxy`,
`no_proxy` environment varialbes, or similar mechanisms), you will want to
be especially cognizant of the HTTP(S) connections needed by the SHIELD
software itself.  Often, these connections will need to bypass am
Internet-bound proxy (i.e. one in a DMZ) in order to function.

![A Proxied Network Topology](/docs/manual/proxied-topology.png)

Likewise, if your cloud storage solution is to be dealt with over HTTP(S),
you will need to make sure that either your proxy server can contact it on
behalf of each SHIELD agent, or that each agent blacklists the domains
and/or IP addresses of the storage endpoints in something like `no_proxy`.

### Where to Colocate SHIELD Agents

Depending on the data systems you wish to backup, and their configuration
with respect to access control, you may be able to get away without
colocating _any_ SHIELD agents in your infrastructure.

There are really only two reasons for colocating a SHIELD agent on a data
system installation: plugin requirements and host access control
configuration.

Most SHIELD plugins stream their data through, without relying on any
temporary local storage.  This removes a throughput bottleneck (the disk),
as well as a capacity concern (how much temporary space do you need?).  Some
plugins, however, require local disk.  If the target system doesn't require
local access (more on that in a moment), you may want to spin up some
machines with large ephemeral disks just to handle these backup / restore
operations.  The conversation for backing up data then looks like this:

![A Dedicated SHIELD Agent](/docs/manual/dedicated-shield-agent.png)

Some plugins absolutely cannot be executed across the network.  The
[Filesystem Plugin][fs], for example, can only deal with files on the local
filesystem (networked filesystems notwithstanding).  Therefore, if you need
to back up files on a host, you will need to deploy a SHIELD agent to run on
that host.

[fs]: /docs/plugins/fs


## Using BOSH

[BOSH][bosh] is a cloud-agnostic deployment and orchestration tool that
excels at lifecycle management of software at all scales.  SHIELD has a
_BOSH release_ that can be used to deploy both the SHIELD core, and SHIELD
agents into new and existing BOSH deployments.

If you're already using BOSH (for example, if you are deploying Cloud
Foundry), adding SHIELD into your infrastructure should be easy.  If you are
still looking for a great release engineering framework, you can get your
feet wet with a SHIELD deployment or three.

The SHIELD BOSH release can be found [on Github][release].

[release]: https://github.com/starkandwayne/shield-boshrelease/releases

### Deploying the SHIELD Core

Usually, the SHIELD core is a standalone, self-contained deployment.  To
deploy, you'll need to find or create a deployment manifest.  A good
starting point can be found [here][manifest.yml].

//[manifest.yml]: https://github.com/starkandwayne/shield-boshrelease/blob/master/manifests/shield.yml
[manifest.yml]: /docs/manual/shield.yml

Save that file locally, as `shield.yml`, and then run:

    $ bosh -e my-bosh deploy \
        -d shield \
        -v static_ip=192.0.2.5 \
        -v domain=shield.example.com \
        shield.yml

Replace `domain` with the FQDN of your SHIELD management console, and
`192.0.2.5` with a static IP that you want to deploy SHIELD on.  You may
need to consult your BOSH [cloud-config][bosh-cc] to find a suitable IP in
the `default` network.  Optionally, you may modify the deployment manifest
to specify a different network.

[bosh-cc]: https://bosh.io/docs/cloud-config

**NOTE**: The provided deployment manifest assumes that your BOSH director
has been deployed with a _config-server_ that can generate the necessary
certificates and keys for securing SHIELD's communications.  If that is not
the case, you will need to provide additional command-line options to the
`bosh deploy` command to store the generated credentials locally.  See
[the BOSH documentation][bosh-vars] for more information.

[bosh-vars]: https://bosh.io/docs/cli-int/#vars-store

Once BOSH has finished deploying SHIELD, you should be able to access the
SHIELD management console at [https://$IP](#).  The default login will be
`admin` (username) and `shield` (password).

### Deploying SHIELD Agents

If you need to colocate agents on other BOSH deployments, you have a few
options.  The fastest method is to modify those deployment manifests to
include the `shield-agent` job in the appropriate BOSH instance groups, like
this:

    instance_groups:
      - name: some-database
        jobs:
          # ... other jobs ....
          - name:    shield-agent
            release: shield

        # ... rest of configuration ...

This can get out of hand fast.  A more elegant solution is to use [BOSH
runtime configs][bosh-rcs] and _inject_ the SHIELD agent job into other
deployments without mucking about with their deployment manifests.

[bosh-rcs]: https://bosh.io/docs/runtime-config

Here's a working runtime config:

    ---
    releases:
      - name:    shield
        version: 8.0.8

    addons:
      - name: shield
        jobs:
          - name:    shield-agent
            release: shield

To use this, update your existing runtime-config:

    $ bosh update-runtime-config addons.yml

Then, `bosh deploy` your pre-existing manifests, without changing them.
For more information, including how to limit the `shield` addon to just
specific deployments / VMs, read the
[BOSH runtime-configs documentation][bosh-rcs].


## Using Docker

### The SHIELD Core Image

TBD

### The SHIELD Agent Standalone Image

TBD

### Embedding the SHIELD Agent

TBD


## Manual Installation

TBD

### Deploying The SHIELD Core

TBD

### Setting up the `nginx` Proxy

TBD

### Deploying SHIELD Agents

TBD


## Configuration Reference

TBD

# Getting around in SHIELD

TBD

## Logging into the Web UI

TBD

## General Web UI Layout

TBD

## The Web UI HUD / Health

TBD

## Using the CLI

TBD

## CLI Authentication

TBD

## Auth Tokens

TBD

## Getting help from the CLI

TBD

# Configuring Backups

TBD

## Wizard Walkthrough

TBD

## The Systems Page

TBD

## Adding a second schedule

TBD

# Running Backups / Restores

TBD

## Ad hoc vs. Scheduled

TBD

## The Ad hoc backup Wizard

TBD

## The Timeline View

TBD

## Annotating Tasks

TBD

## Restoring from the Timeline Page

TBD

## The Restore Wizard

TBD

# Managing Storage

TBD

## How SHIELD Uses Cloud Storage

TBD

## Retention Policies

TBD

## How the HUD interacts

TBD

## Storage Thresholds

TBD

## The Storage Display Page

TBD

## Shared Storage

TBD

# Multi-Tenancy

TBD

## What is a Tenant?

TBD

## Switching Tenants

TBD

## Role Assignments (and what they mean)

TBD

## Authentication Providers and Tenants

TBD

### UAA

TBD

### Github

TBD

## The default tenant

TBD

# Encryption

TBD

## What is Encryption

TBD

## Why do I Care?

TBD

## How does SHIELD use encryption?

TBD

## At-rest vs. in-flight encryption

TBD

# Administration

TBD

## Initializing A SHIELD Core

TBD

## The Master Password

TBD

## The Administrative Backend

TBD

### Tenants

TBD

### Shared Storage

TBD

### Retention Policy Templates

TBD

### Managing Agents

TBD

### Authentication Providers

TBD

### Local User Management

TBD

### Rekeying SHIELD

TBD

### Session Management

TBD

# How Do I Backup &lt;X&gt;?

## SHIELD Itself

### The Problem With Encryption

TBD

### The Important Bits of SHIELD

TBD

### Configuring the `fs` Plugin

TBD

### "Normal-mode" Restores

TBD

## Cloud Foundry UAA

## Cloud Foundry CCDB

## BOSH

# Monitoring SHIELD

TBD

## Using the HUD

TBD

## API Access for Monitoring

TBD

## Metrics of interest

TBD

## Log messages to watch

TBD
