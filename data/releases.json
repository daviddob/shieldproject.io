{
  "all": [
    {
      "notes": "SHIELD v8 is a marked improvement over previous version of SHIELD.\r\n\r\n# New Features\r\n\r\n  - *Multi-Tenancy* - SHIELD now supports the notion of tenants, which allow\r\n    site operators to group their users logically, and sequester teams from\r\n    one another.  Each tenant has its own set of jobs, tasks, archives,\r\n    etc., and members of one tenant cannot interact with the resources of\r\n    another.  Users can be assigned to multiple tenants, concurrently.\r\n\r\n  - *Archive Encryption* - SHIELD now leverages AES-256 encryption when\r\n    storing backup archives in cloud storage, making sure that your data is\r\n    secure, even at-rest.\r\n\r\n  - *Agent Registration* - SHIELD Agents now register with the SHIELD Core,\r\n    and provide metadata to assist operators in the configuration of backup\r\n    targets, and cloud storage systems.\r\n\r\n  - *Improved Web UI* - SHIELD's web-based user interface got a massive\r\n    overhaul in this release, with a concerted focus on efficiency and\r\n    ease-of-use for operators, and their immediate concerns.\r\n\r\n  - *New CLI* - The SHIELD CLI has been rewritten from the ground-up to\r\n    interface more cleanly with the SHIELD v8 API.  It handles plugin\r\n    configuration more naturally, without forcing you to write proper JSON.\r\n    Yay.  It also supports a new `import` function that makes it easy to\r\n    ensure that your target and storage systems, jobs, retention policies,\r\n    etc. are always correct.\r\n\r\n  - *Improved Scheduling* - Backup Jobs can now be run every X hours, much\r\n    to the delight of SHIELD users everywhere.",
      "url": "https://github.com/starkandwayne/shield/releases/tag/v8.0.0",
      "version": "8.0.0"
    },
    {
      "notes": "**SHIELD 8.x is still beta software; not recommended for production deployment**\r\n\r\n# New Features\r\n\r\n- The `azure` plugin now features a `path_prefix` setting to allow\r\n  sharing of a single Azure Blobstore container amongst several\r\n  jobs and/or SHIELDs.\r\n\r\n# Improvements\r\n\r\n- The `fs` plugin no longer relies on the `bsdtar` executable to\r\n  function; instead, all tarball creation / extraction is handled\r\n  directly by the plugin code, making it easier to deploy.\r\n\r\n- The `test-store` and `purge` tasks that are scheduled in the\r\n  slow loop are now skipped if the Vault is sealed.  This keeps\r\n  the task list from growing with lots of tasks that will not be\r\n  scheduled until later.  For `purge` tasks this wasn't a huge\r\n  deal, but for `test-store` it meant that cloud storage would get\r\n  slammed with test after test after test after test as soon as\r\n  the SHIELD was unlocked.\r\n\r\n# Breaking Changes\r\n\r\n- The `fs` plugin no longer functions as a store plugin.  This\r\n  configuration was deemed to dangerous in the wild, given the\r\n  locality constraints.  If you need local-ish filesystem-backed\r\n  storage, check out the `webdav` plugin.\r\n\r\n# Bug Fixes\r\n\r\n- WebSocket broadcast receivers are only registered _after_ a\r\n  successful upgrade from plain HTTP to WebSockets, to avoid\r\n  stalling out the core on badly-behaved clients.\r\n\r\n- The CLI now honors `-k` everywhere it appears.\r\n\r\n- It is now possible to update a target / store that was created\r\n  without any configuration (no `--data` on create-*).\r\n\r\n- CLI update-* commands now properly display the updated object\r\n  attributes, instead of an empty report.\r\n\r\n- The `create-auth-token` CLI command now honors `--json`.\r\n\r\n- Fix javascript event handler stacking bugs in the web UI.  In\r\n  short, form submissions would \"remember\" their previous onsubmit\r\n  handlers, leading to some _very_ interesting errors on both\r\n  client- and server-side.",
      "url": "https://github.com/starkandwayne/shield/releases/tag/v8.0.1",
      "version": "8.0.1"
    },
    {
      "notes": "**SHIELD 8.x is still beta software; not recommended for production deployment**\r\n\r\n# New Features\r\n\r\n- SHIELD now supports Fixed Key encryption for disaster recovery\r\n  of backups for SHIELD itself.\r\n\r\n# Improvements\r\n\r\n- The `s3` plugin now uses pathd buckets, so it should work better\r\n  with S3-workalikes that don't support DNS-style buckets.\r\n\r\n- The `fs` plugin strips the base director from the files as they\r\n  are archived, allowing archives to be portably replayed to\r\n  different base directors on restore.\r\n\r\n- The `mysql` and `xtrabackup` plugins are better now.\r\n\r\n- `buckler import` works better now, no longer requiring a SHIELD\r\n  core (via either `--core` or `$SHIELD_CORE`).  It also now\r\n  supports skipping TLS verification of the SHIELD Core.\r\n\r\n# Bug Fixes\r\n\r\n- Plugins now accept boolish strings and numbers in place of\r\n  actual booleans.\r\n\r\n- Handle symlinks in the `fs` plugin\r\n\r\n- The S3 plugin now properly sets a multipart upload chunk size\r\n  of 5 MEGABYTES, not 5 GIGABYTES, so we don't OOM on VMs.  Oops.\r\n\r\n- The WebUI can now display OAuth provider configuration (again).\r\n\r\n- `buckler create-policy` now properly validates the expiry value\r\n  as a number.\r\n\r\n- SHIELD Core no longer leaks file descriptors when talking to the\r\n  sealed Vaults.",
      "url": "https://github.com/starkandwayne/shield/releases/tag/v8.0.3",
      "version": "8.0.3"
    },
    {
      "notes": "# Bug Fixes\n\n- The v8 Web UI now properly renders target plugin forms, based\n  on the metadata provided by the plugins themselves.  Previously,\n  only the fs plugin was working, due to the next bug we fixed.\n\n- The fs plugin was mistakenly reporting a store field, something\n  that got missed when we removed its ability to act as a store\n  plugin.\n\n- The swift plugin now features field metadata.",
      "url": "https://github.com/starkandwayne/shield/releases/tag/v8.0.4",
      "version": "8.0.4"
    },
    {
      "notes": "# Improvements\n\n- The Github OAuth provider now properly handles Github Enterprise\n  for API work (user lookups, org lookups, etc.)\n\n- The Github OAuth provider can now handle assignment across\n  multiple tenants (including SYSTEM) from a single Github Org.\n\n- Shield CLI has been renamed from `buckler` back to `shield` similar\n  to previous versions.\n\n- Added Cassandra target plugin.\n\n\n# Bug Fixes\n\n- Fix a missing slash in the Github Authentication Provider\n  display, in the administrative backend.\n\n- The Web UI now propagates the job name from the configuration\n  wizard to the API, replacing 'a random name?' with something\n  just a bit less ... random.",
      "url": "https://github.com/starkandwayne/shield/releases/tag/v8.0.5",
      "version": "8.0.5"
    },
    {
      "notes": "# Bug Fixes\n\n- Fix non-deterministic short-circuit bug in Github OAuth role\n  assignment logic that lead to different behaviors depending on\n  how Github returned org/team memberships.",
      "url": "https://github.com/starkandwayne/shield/releases/tag/v8.0.6",
      "version": "8.0.6"
    },
    {
      "notes": "# Bug Fixes\n\n- `shield-agent` will now propagate HTTP proxy environment\n  variables: `http_proxy`, `https_proxy` and `no_proxy`, which\n  some plugins (i.e. s3) can make use of.\n\n- The `postgres` plugin no longer requires a host address.  If not\n  specified, a local loopback (usually UNIX domain socket) will be\n  attempted.\n\n- The `postgres` plugin no longer requires a password.  If not\n  specified, no authentication credentials will be sent.  This is\n  usually paired with an empty (or missing) pg_host, to gain\n  superuser access over loopback (given a 'trust' entry in HBA)",
      "url": "https://github.com/starkandwayne/shield/releases/tag/v8.0.7",
      "version": "8.0.7"
    },
    {
      "notes": "# Improvements\n\n- Global Storage Systems are available for selection during the\n  backup configuration wizard in the web UI.\n\n- Storage systems now properly report their health to all\n  front-end views, fixing a few fixmes along the way.\n\n- Agents can now be resynchronized, in an ad hoc fashion, via the\n  admin backend on the web UI.\n\n- Jobs will have their 'next run' time re-calculated when their\n  schedule is changed.  Previously, the existing schedule was in\n  force until the first run after a schedule change, at which\n  point the new schedule kicked in.  This was weird, so we changed\n  it.\n\n- New Cloud Storage Solutions (global or tenant-based) are\n  considered healthy until proven broken.\n\n- `shield-agent` now has better logging to help troubleshoot\n  registration problems.\n\n# Bug Fixes\n\n- Fix an egregious bug in the scheduling logic that was only\n  considering jobs scheduled in the future to be \"overdue\".\n  Since all jobs start out with a next_run of 0, this caused NO\n  JOBS to ever be scheduled.  Thankfully, 8.x is still beta.\n\n- Fix a segfault when dereferencing a nil Task during a broadcast.\n  Now, we log that we got a nil task, to assist in tracking down\n  why / where its occurring, rather than just crashing on panic.\n\n- The `shield restore-archive` command now prints out the UUID of\n  the task scheduled to run the restore, rather than the cryptic\n  (and oh-so-unhelpful) string \"%s!:bool=true\"\n\n- Neither `shield create-job`, nor `shield update-job` will allow\n  you to create (or modify) jobs to have invalid, unparseable\n  schedules.  This will keep the CLI from accidentally creating\n  schedules that the web UI can't process.\n\n- When restoring through the new wizard, the web UI only shows\n  archives for the selected target system, instead of all of the\n  archives every made for the tenant.  Turns out this was less\n  than useful.\n\n- Fix up some edge cases where we weren't checking for the\n  existence of a tenant in tenant-scope API calls, just the rights\n  to that tenant -- since system users can affect all tenants, we\n  found that we could create child objects on non-existent\n  tenants.\n\n# Developer Stuff\n\n- `bin/testdev` now runs a WebDAV service on the nginx reverse\n  proxy (on `$PORT+1`), since we can no longer use the `fs` plugin\n  for storage operations.\n\n  On MacOS, with homebrew, you'll want to reinstall nginx with\n  WebDAV support: `brew reinstall --with-webdav nginx`\n",
      "url": "https://github.com/starkandwayne/shield/releases/tag/v8.0.8",
      "version": "8.0.8"
    },
    {
      "notes": "# Improvements\n\n- Stop giving out bad advice in the help output of `create-job`\n  and `update-job`, with respect to propery schedule syntax.\n\n- Better error messaging in filepath walker when the `fs` plugin\n  encounters an error or missing stat info.\n\n- Credentials (as defined by plugins) are now redacted in task\n  output, based on the rights of the viewer.\n\n- The xtrabackup plugin now supports the `mysql_socket` option,\n  for specifying the absolute path to the MySQL socket.\n\n\n# Bug Fixes\n\n- Properly set the job name and notes (summary) from the web ui\n  wizard, instead of ignoring what the user provided.  Fixes #387.\n\n- The `webdav` plugin no longer panics if you omit the `https://`\n  or `http://` URL scheme from your DAV server URL.  Instead, it\n  assumes HTTPS and keeps on truckin'.  Other URL parse errors are\n  properly handled now as well.\n\n- Handle people who don't set up their Github profiles properly,\n  and are missing display names.  The Github API returns these as\n  nil string pointers, instead of pointers to the empty string.\n",
      "url": "https://github.com/starkandwayne/shield/releases/tag/v8.0.9",
      "version": "8.0.9"
    },
    {
      "notes": "# Bug Fixes\n\n- Sometimes, code gets lost.  This happened on 8.0.9, when we\n  merged some PRs that blew away PR's #395, #393, #398, and #399.\n  These changes dealt with initialization and SHIELD recovery.\n",
      "url": "https://github.com/starkandwayne/shield/releases/tag/v8.0.10",
      "version": "8.0.10"
    }
  ],
  "latest": "8.0.10"
}
